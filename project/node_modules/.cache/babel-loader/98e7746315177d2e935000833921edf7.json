{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/brendanmahler/Documents/UofC/ENSF607/web_design/ENSF_607_Web_Dev_Project/project/src/Pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button, Form, Col, Row, ListGroup, Modal, FormGroup } from 'react-bootstrap';\nimport './Home.css';\nexport default function Home({\n  state,\n  setState,\n  setIsCreated\n}) {\n  _s();\n\n  const [selectedCourse, setSelectedCourse] = useState(null);\n  const [courseList, setCourseList] = useState([{\n    courseId: \"ENSF607\",\n    courseName: \"Software Design\",\n    courseDescription: \"A course to learn about software design.\",\n    hours: \"6\",\n    courseCredit: \"3\",\n    reference: \"www.google.ca\"\n  }]); // useEffect(() => {\n  //     fetch('path/to/list/api')\n  //         .then((res) => res.json())\n  //         .then((res) => setCourseList(res))\n  // },[])\n\n  const handleCourseClick = e => {\n    console.log(e);\n    setSelectedCourse({\n      data: e,\n      isNewCourse: false\n    });\n  };\n\n  const createCourseClick = e => {\n    console.log(e);\n    setSelectedCourse({\n      isNewCourse: true,\n      data: {\n        courseId: \"\",\n        courseName: \"\",\n        courseDescription: \"\",\n        hours: \"\",\n        courseCredit: \"\",\n        reference: \"\"\n      }\n    });\n  };\n\n  const handleSave = () => {\n    if (selectedCourse.isNewCourse) {\n      setCourseList([...courseList, selectedCourse.data]);\n    } else {\n      setCourseList(courseList.map(element => element.courseId === selectedCourse.data.courseId ? selectedCourse : element));\n    }\n\n    setSelectedCourse(null);\n  };\n\n  const handleDelete = () => {\n    // delete in backend\n    setCourseList(courseList.filter(element => element.courseId !== selectedCourse.data.courseId));\n    setSelectedCourse(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ListGroup, {\n      children: courseList.map(course => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        onClick: () => handleCourseClick(course),\n        children: course.courseName\n      }, course.courseId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: selectedCourse !== null,\n      onHide: () => setSelectedCourse(null),\n      backdrop: \"static\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: selectedCourse && `${selectedCourse.isNewCourse ? 'Create' : 'Edit'} Course`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Course ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter Course ID\",\n              value: selectedCourse.data.courseId,\n              onChange: e => {\n                setSelectedCourse({\n                  isNewCourse: selectedCourse.isNewCourse,\n                  value: e.target.value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleSave,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), selectedCourse && !selectedCourse.isNewCourse ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleDelete,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Hello on the main page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"createButton\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"button\",\n        variant: \"primary\",\n        onClick: () => {\n          createCourseClick();\n        },\n        children: \"Create Course Outline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"uRY33DImuMIpCzRYtlVcUKlvwr0=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/brendanmahler/Documents/UofC/ENSF607/web_design/ENSF_607_Web_Dev_Project/project/src/Pages/Home.js"],"names":["React","useState","useEffect","Button","Form","Col","Row","ListGroup","Modal","FormGroup","Home","state","setState","setIsCreated","selectedCourse","setSelectedCourse","courseList","setCourseList","courseId","courseName","courseDescription","hours","courseCredit","reference","handleCourseClick","e","console","log","data","isNewCourse","createCourseClick","handleSave","map","element","handleDelete","filter","course","value","target"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button, Form, Col, Row, ListGroup, Modal, FormGroup } from 'react-bootstrap';\nimport './Home.css'\n\n\nexport default function Home({ state, setState, setIsCreated }) {\n    const [selectedCourse, setSelectedCourse] = useState(null);\n    const [courseList, setCourseList] = useState([{\n        courseId: \"ENSF607\",\n        courseName: \"Software Design\",\n        courseDescription: \"A course to learn about software design.\",\n        hours: \"6\",\n        courseCredit: \"3\",\n        reference: \"www.google.ca\"\n\n    }]);\n\n    // useEffect(() => {\n    //     fetch('path/to/list/api')\n    //         .then((res) => res.json())\n    //         .then((res) => setCourseList(res))\n    // },[])\n\n    const handleCourseClick = (e) => {\n        console.log(e)\n        setSelectedCourse({ data:e, isNewCourse: false })\n    }\n\n     const createCourseClick = (e) => {\n        console.log(e)\n        setSelectedCourse({isNewCourse : true, data:{\n        courseId: \"\",\n        courseName: \"\",\n        courseDescription: \"\",\n        hours: \"\",\n        courseCredit: \"\",\n        reference: \"\"\n\n    }})\n    }\n\n    const handleSave = () => {\n        if (selectedCourse.isNewCourse) {\n            setCourseList([...courseList, selectedCourse.data])\n        } else {\n            setCourseList(courseList.map((element) => (element.courseId === selectedCourse.data.courseId)\n                ? selectedCourse : element));\n            \n        }\n        setSelectedCourse(null);\n    }\n\n    const handleDelete = () => {\n        // delete in backend\n        setCourseList(courseList.filter((element) => element.courseId !== selectedCourse.data.courseId))\n        setSelectedCourse(null);\n    }\n\n\n\n    return (\n        <div>\n            <ListGroup>\n                {courseList.map((course) => (\n                    <ListGroup.Item\n                        key={course.courseId}\n                        onClick={() => handleCourseClick(course)}\n                    >\n                        {course.courseName}\n                </ListGroup.Item>))}\n            </ListGroup>\n            <Modal\n                show={selectedCourse !== null}\n                onHide={() => setSelectedCourse(null)}\n                backdrop=\"static\"\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>{selectedCourse &&`${selectedCourse.isNewCourse ? 'Create' : 'Edit' } Course`}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                       <Form.Group>\n                            <Form.Label>Course ID</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter Course ID\"\n                                    value = {selectedCourse.data.courseId}\n                                    onChange={(e) => {\n                                    setSelectedCourse({\n                                        isNewCourse: selectedCourse.isNewCourse,\n                                        value: e.target.value\n                                    })\n                                }}                         \n                                />\n                        </Form.Group>\n\n                        \n\n\n\n                        {/* <FormGroup >\n                        {selectedCourse && Object.entries(selectedCourse.data).map(([key, value]) => (\n                            <>\n                            <Form.Label>{key}</Form.Label>\n                           \n                                 \n                           \n                            <Form.Control\n                                key={`modal-${key}`}\n                                placeholder={value}\n                                title={key}\n                                disabled={!selectedCourse.isNewCourse && key === 'courseId'}\n                                    \n                                onChange={(e) => {\n                                    setSelectedCourse({\n                                        isNewCourse: selectedCourse.isNewCourse,\n                                        data: { ...selectedCourse.data, [key]: e.target.value }\n                                    })\n                                }}\n                                />\n                                </>\n             \n                        ))}\n                        </FormGroup> */}\n                        \n                    </Form>\n\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleSave}>\n                        Save\n                    </Button>\n                    {selectedCourse && !selectedCourse.isNewCourse ?\n                        <Button variant=\"primary\" onClick={handleDelete}>Delete</Button>\n                        : null\n                    }\n                </Modal.Footer>\n            </Modal>\n            <h1 className='title'>Hello on the main page</h1>\n\n                \n            \n            <div className='createButton'>\n             <Button\n                \n                type=\"button\"\n                variant=\"primary\"\n                onClick={() => {\n                    createCourseClick();\n                }}\n                > \n                Create Course Outline\n                </Button>\n            </div>    \n        </div>\n    )   \n}"]},"metadata":{},"sourceType":"module"}